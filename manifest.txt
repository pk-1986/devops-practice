Single Container Pod

apiVersion: v1
kind: Pod
metadata:
   name: webserver
spec:
   containers:
      - name: apache
        image: httpd
        ports:
         - containerPort: 80
---------------------------------
Muti Container Pod

apiVersion: v1
kind: Pod
metadata:
   name: fullstack
spec:
   containers:
      - name: apache
        image: httpd
        ports:
         - containerPort: 80
      - name: database
        image: ubuntu
        ports:
         - containerPort: 7501
        command: ["/bin/sh", "-ec", "sleep 1000"] 
----------------------------------------------
Init Container

apiVersion: v1
kind: Pod
metadata:
  name: myapp
spec:
  initContainers:
  - name: initcontainer1
    image: ubuntu
    command:
      - sleep
      - "60" 
  - name: initcontainer2
    image: ubuntu
    command:
      - sleep1
      - "60" 
  containers:
  - name: nginx-container
    image: nginx
------------------------------
Namespaces

apiVersion: v1
kind: Namespace
metadata:
  name: staging
----------------
Environment variables 

apiVersion: v1
kind: Pod
metadata:
  name: myapp
spec:
  containers:
  - name: myapp
    image: nginx
    env:
      - name: DB_HOST
        value: 192.168.0.0
      - name: DB_USER
        value: admin
      - name: DB_PASS
        value: secret

----Commands to check Env----
kubectl exec -it myapp -- bash 
env
----------------------------------
labels

apiVersion: v1
kind: Pod
metadata:
   name: myapp
   labels: 
      env: prod
      app: myapp
spec:
   containers:
      - name: apache
        image: httpd
----------------------------------
# Replicaset - equaity based selector

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: frontend-replicas
spec:
  replicas: 2 # modify replicas according to your case
  selector:
    matchLabels:
      app: apache
      tier: frontend
      env: dev

# Pod details
  template:
    metadata:
      name: apache-pod
      labels:
        app: apache
        tier: frontend
        env: dev
    spec:
      containers:
      - name: apache-container
        image: httpd
        ports:
         - containerPort: 80
---------------------------------------
Pod Creation

apiVersion: v1
kind: Pod
metadata:
  name: apache-pod1
  labels:
    app: apache
    tier: frontend
    env: dev
spec:
  containers:
    - name: apache-container
      image: httpd
      ports:
        - containerPort: 80
--------------------------------
#Replication Controller

apiVersion: v1
kind: ReplicationController
metadata:
  name: myapp-rc
spec:
  replicas: 2
  selector:
    app: nginx
#Pod Section
  template:
    metadata:
      name: myapp-pod
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx-container
        image: nginx
--------------------------------
Replicase - euality based selector

apiVersion: apps/v1
kind: Deployment
metadata:
  name: apache-deploy
spec:
  selector:
    matchLabels:
      app: apache
      env: dev
  replicas: 2

# pod creation
  template:
    metadata:
      name: apache-pod
      labels:
        app: apache
        env: dev
    spec:
      containers:
      - name: apache
        image: httpd
        ports:
        - containerPort: 80

Replicaset - Set based selector

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: myapp-rs
spec:
  replicas: 2
  selector:
    matchExpressions:
    - key: app
      operator: In
      values: 
      - myapp
    - key: tier
      operator: NotIn
      values: 
      - backend
  template:
    metadata:
      name: myapp-pod
      labels:
        app: myapp
    spec:
      containers:
      - name: nginx-container
        image: nginx
--------------------------------
# deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apache-deploy
spec:
  selector:
    matchLabels:
      app: apache
      env: dev
  replicas: 2

# pod creation
  template:
    metadata:
      name: apache-pod
      labels:
        app: apache
        env: dev
    spec:
      containers:
      - name: apache
        image: httpd2
        ports:
        - containerPort: 80
-----------------------------------
volumes
Empty Dir

apiVersion: v1
kind: Pod
metadata:
  name: myapp
  labels:
    app: myapp
spec:
  containers:
  - name: myapp
    image: nginx
    volumeMounts:
    - name: test
      mountPath: /data
      
  volumes:
  - name: test
    emptyDir: {}
-------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: myapp
  labels:
    app: myapp
spec:
  containers:
  - name: myapp
    image: nginx
    volumeMounts:
    - name: test
      mountPath: /data

  volumes:
  - name: test
    hostPath:
      path: /mydata
--------------------------
apiVersion: v1
kind: PersistentVolume
metadata:
  name: block-pv
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: /data
-------------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc
spec:
  storageClassName: manual
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
-----------------------
apiVersion: v1
kind: Pod
metadata:
  name: myapp
  labels:
    app: myapp
spec:
  containers:
  - name: myapp
    image: nginx
    volumeMounts:
    - name: test
      mountPath: /data

  volumes:
  - name: test
    persistentVolumeClaim:
      claimName: pvc
---------------------------
apiVersion: v1
kind: Pod
metadata:
   name: apache-cpu
spec:
   containers:
      - name: apache
        image: httpd
        ports:
         - containerPort: 80
        resources:
            requests:
               cpu: "50m"
            limits:
               cpu: "100m"
-------------------------------
apiVersion: v1
kind: Pod
metadata:
   name: apache-memory
spec:
   containers:
      - name: apache
        image: httpd
        ports:
         - containerPort: 80
        resources:
            requests:
               memory: "100Mi"
            limits:
               memory: "200Mi"
---------------------------------
Cluster IP

apiVersion: v1
kind: Service
metadata:
  name: cluster-service
spec:
  type: ClusterIP
  selector:
    app: apache
    env: dev
    tag: cluster-service
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 80
==
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-for-cluster-service
spec:
  selector:
    matchLabels:
      app: apache
      env: dev
      tag: cluster-service
  replicas: 2

# pod creation
  template:
    metadata:
      name: apache-pods
      labels:
        app: apache
        env: dev
        tag: cluster-service
    spec:
      containers:
      - name: apache
        image: httpd
        ports:
        - containerPort: 80
-----------------------------
Nodeport

apiVersion: v1
kind: Service
metadata:
  name: nodeport-service
spec:
  type: NodePort
  selector:
    app: apache
    env: dev
    tag: nodeport-service
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 80
      nodePort: 30007

# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-for-nodeport-service
spec:
  selector:
    matchLabels:
      app: apache
      env: dev
      tag: nodeport-service
  replicas: 2

# pod creation
  template:
    metadata:
      name: apache-pods
      labels:
        app: apache
        env: dev
        tag: nodeport-service
    spec:
      containers:
      - name: apache
        image: httpd
        ports:
        - containerPort: 80
---------------------------
===============
Load Balancer

apiVersion: v1
kind: Service
metadata:
  name: loadbalancer-svc
spec:
  selector:
    app: myapp
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80

# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-for-cluster-service
spec:
  selector:
    matchLabels:
      app: myapp
  replicas: 2

# pod creation
  template:
    metadata:
      name: apache-pods
      labels:
        app: myapp
    spec:
      containers:
      - name: apache
        image: httpd
        ports:
        - containerPort: 80
--------------------------
sushmithasetty09@gmail.com
------------------------------